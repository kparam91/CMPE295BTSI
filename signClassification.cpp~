#include<iostream>
#include<stdio.h>
#include<string>
#include <vector>
#include<stdint.h>
#include<stdlib.h>
using namespace std;

enum color{
	BLUE_WHITE,//0
	YELLOW_BLACK,//1
	WHITE_BLACK,//2
	BLACK_WHITE,//3
	RED_WHITE,//4
	WHITE_RED_BLACK,//4
	GREEN_WHITE//5
};
enum shape{
	SQUARE,
	CIRCLE,
	RECTANGLE_W,
	RECTANGLE_L,
	HEXAGON,
	DIAMOND
};

enum position{
    1and1,
    1and2,
    1and3,
    2and1,
    2and2,
    2and3, 
    3and1,
    3and2,
    3and3
};

string colorNames[]={"BLUE_WHITE",//0
						"YELLOW_BLACK",//1
						"WHITE_BLACK",//2
						"BLACK_WHITE",//3
						"RED_WHITE",//4
						"WHITE_RED_BLACK",
						"GREEN_WHITE"//5
						};
						
string signShape[] ={"SQUARE",
					"CIRCLE",
					"RECTANGLE_W",
					"RECTANGLE_L",
					"HEXAGON",
					"DIAMOND"};
					
					
string signposition[]={
    "1and1",
    "1and2",
    "1and3",
    "2and1",
    "2and2",
    "2and3", 
    "3and1",
    "3and2",
    "3and3"
};
					
					

					
class sign{
	public:
	
		string name;
		color col;
		shape sh;
		position location;
		//float sizeFactor;//
		uint8_t location; //Top=1, Middle=2, Bottom=3, Left=1, Middle=2, Right=3, use two hex digits
		sign(string n, color c, shape s, position l){
			this->name= n;
			this->col=c;
			this->sh = s;
			this->location=l;
		}
		sign(){
			//empty constructor
		}
	friend ostream & operator << (ostream &out, sign &s);
};

ostream & operator << (ostream &out, sign &s){
	
	out<<"NAME: "<<s.name<<" COLOR: "<<colorNames[s.col]<<" SHAPE: "<<signShape[s.sh]<<" LOCATION: "<<hex<<int(s.location)<<endl;
	return out;
}
int main(){
	string name,color, shape, location;
	vector <sign *> signList;
	vector <sign> filteredList;
	
	sign stop("STOP",RED_WHITE, HEXAGON, 2and3);	
	signList.push_back(&stop);
	
	sign disabled("DISABLED_PARKING",BLUE_WHITE, SQUARE,2and2);
	signList.push_back(&disabled);
	
	sign railCrossing("RAIL_CROSSING",YELLOW_BLACK, CIRCLE, 2and3);
	signList.push_back(&railCrossing);
	
	sign bikeLane("BIKE_LANE",WHITE_BLACK, RECTANGLE_W, 2and3);
	signList.push_back(&bikeLane);
	
	sign oneWay("ONE_WAY", BLACK_WHITE, RECTANGLE_W, 2and3);
	signList.push_back(&oneWay);
	
	sign leftUTurn("LEFT_U_TURN",WHITE_BLACK, SQUARE, 2and1);
	signList.push_back(&leftUTurn);
	
	sign doNotEnter("DO_NOT_ENTER",RED_WHITE, SQUARE, 2and3);
	signList.push_back(&doNotEnter);
	
	sign pedestrian("PEDESTRIAN",YELLOW_BLACK,DIAMOND, 2and3);
	signList.push_back(&pedestrian);
	
	sign noLeftTurn("NO_LEFT_TURN",WHITE_RED_BLACK, SQUARE, 2and1);
	signList.push_back(&noLeftTurn);
	
	sign speedLimit("SPEED_LIMIT",WHITE_BLACK, RECTANGLE_L, 2and3);
	signList.push_back(&speedLimit);
	while(1)
	{
	
	    cout<<"Enter the shape of the sign OR enter q to exit"<<endl;
	    cout<< "Possible values:SQUARE CIRCLE RECTANGLE_W RECTANGLE_L HEXAGON DIAMOND"<<endl;
	    cin>>shape;
	    if(shape=="q")
	    {
	        break;
	    }
	    cout<<"Enter the color of the sign as Background_foreground "<<endl;
	    cout<<"Possible values for color"<<endl;
	    for(vector<sign *>::iterator i= signList.begin(); i!= signList.end(); i++ )
	    {
		    sign t;
		    t=**i;
		    if(shape.compare(signShape[t.sh])==0)
		    {
		        
		       filteredList.push_back(t);
		       cout<<colorNames[t.col]<<endl;
		      // cout<<"PUSH BACK"<<filteredList.back()<<endl;
			
		    }
	    }
	    
	    cin>>color;
	    cout<<"Enter the location of the sign "<<endl;
	    cout<<"Possible values:"<<endl;
	    for(vector<sign >::iterator j= filteredList.begin(); j!= filteredList.end(); j++ )
	    {
	    
		    sign q;
		    q=*j;

		    if(!color.compare(colorNames[q.col])==0)
		    {	 
		       filteredList.erase(j);		       
		       j--;			      	
		    }
		    else{
		         cout<<(int)q.location<<endl;	
		    }
	    }
	 
	    bool flag=false;
	    cin>>location;
	    for(vector<sign >::iterator k= filteredList.begin(); k!= filteredList.end(); k++ )
	    {	        
	        sign q;
		    q=*k;
            if(color.compare(position[q.location])==0])
            {            
                flag=true;
                cout<<q<<endl;
                break;
            }
        }
	    
	    if(!flag)
	    {
	        cout<<"Sign not found"<<endl;
	    }
	    
    }
	return 0;
}

